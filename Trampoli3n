#!/usr/bin/python3
# Copyright Â© 2015, Jeremy Heiner (github.com/JHeiner).
# All rights reserved. See LICENSE file.

import logging, re, selectors, socket, struct, subprocess, sys

from logging import NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL

logging.basicConfig( stream=sys.stderr, level=WARNING,
                     format="%(pathname)s:%(lineno)d: %(message)s" )

logger = logging.getLogger()
extra = logger.isEnabledFor( DEBUG - 1 )
if extra: logger.info( 'extra checking being done' )

try:

  def fromFill( readAllFunc, container ):
    ought = len( container )
    if ought <= 0: raise RuntimeError( 'fill empty container' )
    actual = readAllFunc( container )
    if actual == 0:
      raise EOFError( 'unfilled (ought %s, actual 0)' % ought )
    if actual != ought:
      raise BufferError( 'unfilled (ought %s, actual %s)' % ( ought, actual ) )
    if extra:
      logger.debug( 'filled: %s', bytes(container) )

  def toDrain( writeAllFunc, container ):
    ought = len( container )
    if ought <= 0: raise RuntimeError( 'drain empty container' )
    actual = writeAllFunc( container )
    if actual != ought:
      raise BufferError( 'undrained (ought %s, actual %s)' % ( ought, actual ) )
    if extra:
      logger.debug( 'drained: %s', bytes(container) )
    container.release()

  i3ipcPath = subprocess.check_output( ['i3','--get-socketpath'] ).rstrip()
  logger.info( 'i3 socketpath = %s', i3ipcPath )
  i3ipcSock = socket.socket( socket.AF_UNIX )
  i3ipcSock.connect( i3ipcPath )

  def i3ipcFill( container ):
    i3ipcSock.recv_into( container, flags=socket.MSG_WAITALL )
    return len( container )
  def i3ipcDrain( container ):
    i3ipcSock.sendall( container )
    return len( container )
  def fromI3ipcFill( container ):
    fromFill( i3ipcFill, container )
  def toI3ipcDrain( container ):
    toDrain( i3ipcDrain, container )
  def fromChromeFill( container ):
    fromFill( sys.stdin.buffer.readinto, container )
  def toChromeDrain( container ):
    toDrain( sys.stdout.buffer.write, container )
    sys.stdout.buffer.flush()

  nativeInt32 = struct.Struct( '=i' )

  def unpackInt32( container ):
    result = int.from_bytes( container, sys.byteorder, signed=True )
    if extra:
      from_struct = nativeInt32.unpack_from( container )[0]
      assert result == from_struct, '%s == %s' % ( result, from_struct )
    return result

  def packInt32( value, container ):
    nativeInt32.pack_into( container, 0, value )
    if extra:
      from_bytes = int.from_bytes( container, sys.byteorder, signed=True )
      assert value == from_bytes, '%s == %s' % ( value, from_bytes )

  # chromium will not accept any message longer than 1MB
  storage = memoryview( bytearray( 1000000 ) )
  hdrView = storage[  0 : 14 ]
  mgcView = storage[  0 :  6 ]
  oneView = storage[  6 : 10 ]
  twoView = storage[ 10 : 14 ]
  msgView = storage[ 14 :    ]
  i3header = struct.Struct( '=6sii' )

  magic = b'i3-ipc'
  blank = b'@@@@@@@@@@@@@@'
  valid = re.compile( rb' \[ (-?\d+) , (["{[]).*([]}"]) \] '
                      .replace( b' ', rb'\s*' ) )

  def fromChromeToI3ipc():

    try:
      fromChromeFill( twoView )
    except EOFError:
      logging.info( 'nothing read, quitting' )
      sys.exit( 0 )

    length = unpackInt32( twoView )
    if length <= 0 or len( msgView ) < length:
      raise RuntimeError( 'browser message length %s rejected' % length )
    logger.debug( 'expecting %s bytes from browser', length )

    message = msgView[ : length ]
    fromChromeFill( message )

    match = valid.fullmatch( message )
    if not match:
      raise RuntimeError( 'bad message: %s' % bytes(message) )
    if extra:
      logger.debug( 'matched: %s', match.groups() )
    msgType = int( match.group( 1 ) )
    src = match.start( 2 )
    end = match.end( 3 )
    message.release()

    length = 0
    isString = msgView[ src ] == msgView[ end - 1 ]
    if isString:
      src += 1
      end -= 1
    while src < end:
      char = msgView[ src ]
      src += 1
      if isString and char == 0x5c:
        if src >= end:
          raise RuntimeError( 'truncated JSON string escape' )
        char = msgView[ src ]
        src += 1
        if char != 0x22: # "
          raise RuntimeError( 'unsupported JSON string escape 0x%X' % char )
      msgView[ length ] = char
      length += 1

    i3header.pack_into( hdrView, 0, magic, length, msgType )
    toI3ipcDrain( storage[ 0 : 14+length ] )

  def fromI3ipcToChrome():

    i3header.pack_into( hdrView, 0, magic, 0, 0 )
    fromI3ipcFill( hdrView )
    if not mgcView == magic:
      raise RuntimeError( 'bad magic: %s' % bytes(mgcView) )
    length = unpackInt32( oneView )
    msgType = unpackInt32( twoView )
    if ( msgType & 0x80000000 ):
      msgType = -1 - ( msgType & 0x7fffffff )
    logger.debug( 'parsed i3ipc header: %s %s', length, msgType )
    prefix = str(msgType).encode()
    if length < 0 or len( msgView ) - len( prefix ) - 3 < length:
      raise RuntimeError( 'i3ipc message length %s rejected' % length )

    message = msgView[ : length ]
    fromI3ipcFill( message )
    message.release()

    src = length
    length += len( prefix ) + 3
    dst = length - 1
    msgView[ dst ] = 0x5d
    while src > 0:
      src -= 1
      dst -= 1
      msgView[ dst ] = msgView[ src ]
    dst -= 1
    msgView[ dst ] = 0x2c
    src = len( prefix )
    while src > 0:
      src -= 1
      dst -= 1
      msgView[ dst ] = prefix[ src ]
    if dst != 1:
      raise RuntimeError( 'bad arraycopy: %s' % dst )
    msgView[ 0 ] = 0x5b

    packInt32( length, twoView )
    toChromeDrain( storage[ 10 : 14+length ] )

  selector = selectors.DefaultSelector()
  selector.register( i3ipcSock, selectors.EVENT_READ, fromI3ipcToChrome )
  selector.register( sys.stdin, selectors.EVENT_READ, fromChromeToI3ipc )
  while True:
    events = selector.select()
    for key, mask in events:
      ( key.data )()

except Exception:
  logger.exception( 'caught an exception' )
  sys.exit( 1 )

finally:
  logging.shutdown()

