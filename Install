#!/usr/bin/env python3
# Copyright Â© 2015, Jeremy Heiner (github.com/JHeiner).
# All rights reserved. See LICENSE file.

import argparse, json, re, os, sys

config = os.environ.get('XDG_CONFIG_HOME') or '~/.config'

preferences = os.path.join( config, 'chromium/Default/Preferences' )
if not os.path.exists( os.path.expanduser( preferences ) ):
    preferences = os.path.join( config, 'google-chrome/Default/Preferences' )

parser = argparse.ArgumentParser(
    description='hooks Trampoline into Chrome',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter )
parser.add_argument( '-n', '--dryrun', action='store_true',
                     help='do nothing, just print info' )
parser.add_argument( '-u', '--uninstall', action='store_true',
                     help='delete (instead of install)' )
parser.add_argument( "prefs", nargs='?', default=preferences,
                     help='chrome preferences file' )
args = parser.parse_args()

preferences = os.path.expanduser( args.prefs )

here = sys.path[0]
print( '    from:', here )

name = None
matcher = re.compile( '^ i3.trampoline = "([.0-9_a-z]+)" ; $'
                      .replace( ' ', r'\s*' ).replace( '"', '["\']' ) )
with open( os.path.join( here, 'trampoline.js' ) ) as trampoline:
    for line in trampoline:
        match = matcher.match( line )
        if match:
            name = match.group( 1 )
if not name:
    raise RuntimeError( 'cannot find name in trampoline.js' )
print( '    name:', name )

into = os.path.join( os.path.dirname( os.path.dirname( preferences ) ),
                     'NativeMessagingHosts' )
print( '    into:', into )

ids = []
with open( preferences ) as source:
    settings = json.load( source )['extensions']['settings']
    for id in settings:
        if 'path' in settings[id]:
            path = settings[id]['path']
            if here == path:
                ids.append( id )
                print( '      id:', id )

if args.uninstall:

    if not args.dryrun:
        os.remove( os.path.join( into, name+'.json' ) )
        print( 'uninstall successful' )

elif len( ids ) != 1:

    raise RuntimeError( '%s extensions in the "from" directory' % len( ids ) )

elif not args.dryrun:

    manifest = {
        "name": name,
        "description": "Bounce messages between Chrome and the i3 IPC socket.",
        "path": os.path.join( here, "Trampoline" ),
        "allowed_origins": [ "chrome-extension://"+ids[0]+"/" ],
        "type": "stdio" }

    with open( os.path.join( into, name+'.json' ), 'w' ) as destination:
        json.dump( manifest, destination, indent=2 )

    print( 'install successful' )

