#!/usr/bin/python3
# Copyright Â© 2015, Jeremy Heiner (github.com/JHeiner).
# All rights reserved. See LICENSE file.

import logging, socket, struct, subprocess, sys

from logging import NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL

logging.basicConfig( stream=sys.stderr, level=CRITICAL,
                     format="%(pathname)s:%(lineno)d: %(message)s" )

logger = logging.getLogger()
extra = logger.isEnabledFor( DEBUG - 1 )
if extra: logger.info( 'extra checking being done' )

try:

  def fromFill( readAllFunc, container ):
    ought = len( container )
    if ought <= 0: raise RuntimeError( 'fill empty container' )
    actual = readAllFunc( container )
    if actual == 0:
      raise EOFError( 'unfilled (ought %s, actual 0)' % ought )
    if actual != ought:
      raise BufferError( 'unfilled (ought %s, actual %s)' % ( ought, actual ) )
    if extra:
      logger.debug( 'filled: %s', bytes(container) )

  def toDrain( writeAllFunc, container ):
    ought = len( container )
    if ought <= 0: raise RuntimeError( 'drain empty container' )
    actual = writeAllFunc( container )
    if actual != ought:
      raise BufferError( 'undrained (ought %s, actual %s)' % ( ought, actual ) )
    if extra:
      logger.debug( 'drained: %s', bytes(container) )
    container.release()

  i3ipcPath = subprocess.check_output( ['i3','--get-socketpath'] ).rstrip()
  logger.info( 'i3 socketpath = %s', i3ipcPath )
  i3ipcSock = socket.socket( socket.AF_UNIX )
  i3ipcSock.connect( i3ipcPath )

  def i3ipcFill( container ):
    i3ipcSock.recv_into( container, flags=socket.MSG_WAITALL )
    return len( container )
  def i3ipcDrain( container ):
    i3ipcSock.sendall( container )
    return len( container )
  def fromI3ipcFill( container ):
    fromFill( i3ipcFill, container )
  def toI3ipcDrain( container ):
    toDrain( i3ipcDrain, container )
  def fromChromeFill( container ):
    fromFill( sys.stdin.buffer.readinto, container )
  def toChromeDrain( container ):
    toDrain( sys.stdout.buffer.write, container )
    sys.stdout.buffer.flush()

  nativeInt32 = struct.Struct( '=i' )

  def unpackInt32( container ):
    result = int.from_bytes( container, sys.byteorder, signed=True )
    if extra:
      from_struct = nativeInt32.unpack_from( container )[0]
      assert result == from_struct, '%s == %s' % ( result, from_struct )
    return result

  def packInt32( value, container ):
    nativeInt32.pack_into( container, 0, value )
    if extra:
      from_bytes = int.from_bytes( container, sys.byteorder, signed=True )
      assert value == from_bytes, '%s == %s' % ( value, from_bytes )

  # chromium will not accept any message longer than 1MB
  storage = memoryview( bytearray( 1000000 ) )
  hdrView = storage[  0 : 14 ]
  mgcView = storage[  0 :  6 ]
  oneView = storage[  6 : 10 ]
  twoView = storage[ 10 : 14 ]
  msgView = storage[ 14 :    ]

  magic = b'i3-ipc'
  blank = b'@@@@@@@@@@@@@@'
  errBadMessageType = b'"bad message: _"'
  errBadSubscribe = b'"subscribe unsupported"'

  while True:

    try:
      fromChromeFill( twoView )
    except EOFError:
      logging.info( 'nothing read, quitting' )
      sys.exit( 0 )

    length = unpackInt32( twoView )
    if length <= 0 or len( msgView ) < length:
      raise RuntimeError( 'browser message length %s rejected' % length )
    logger.debug( 'expecting %s bytes from browser', length )

    message = msgView[ : length ]
    fromChromeFill( message )

    if length == 1:
      digit = message[0] - 0x30
      if digit == 1 or 3 <= digit and digit <= 7:
        logger.debug( 'recognized single-digit message: %s', digit )
        # GET_{WORKSPACES,OUTPUTS,TREE,MARKS,BAR_CONFIG,VERSION}
        length = 0 # no payload
        packInt32( length, oneView )
        packInt32( digit, twoView )
      else:
        digit += 0x30
        logger.warning( 'funky char from chrome: %s', digit )
        length = len( errBadMessageType )
        msgView[ : length ] = errBadMessageType
        msgView[ length-2 ] = digit
        packInt32( length, twoView )
        toChromeDrain( storage[ 10 : 14+length ] )
        continue
    else:
      first = message[0]
      last = message[-1]
      if first == 0x22 and message[-1] == 0x22: # COMMAND
        logger.debug( 'recognized string' )
        message[0] = message[-1] = 0x20
        packInt32( length, oneView )
        packInt32( 0, twoView )
      elif first == 0x5b and message[-1] == 0x5d: # SUBSCRIBE
        logger.debug( 'recognized array' )
        length = len( errBadSubscribe )
        msgView[ : length ] = errBadSubscribe
        packInt32( length, twoView )
        toChromeDrain( storage[ 10 : 14+length ] )
        continue
      else:
        logger.warning( 'funky message from chrome: %s...%s', first, last )
        length = len( errBadMessageType )
        msgView[ : length ] = errBadMessageType
        msgView[ length-2 ] = first
        packInt32( length, twoView )
        toChromeDrain( storage[ 10 : 14+length ] )
        continue

    mgcView[:] = magic
    toI3ipcDrain( storage[ 0 : 14+length ] )

    hdrView[:] = blank
    fromI3ipcFill( hdrView )
    if not mgcView == magic:
      raise RuntimeError( 'bad magic: %s' % bytes(mgcView) )
    length = unpackInt32( oneView )
    msgType = unpackInt32( twoView )
    logger.debug( 'parsed i3ipc header: %s %s %s',
                  bytes(mgcView), length, msgType )
    if length < 0 or len( msgView ) < length:
      raise RuntimeError( 'i3ipc message length %s rejected' % length )

    message = msgView[ : length ]
    fromI3ipcFill( message )
    message.release()

    packInt32( length, twoView )
    toChromeDrain( storage[ 10 : 14+length ] )

except Exception:
  logger.exception( 'caught an exception' )
  sys.exit( 1 )

finally:
  logging.shutdown()

